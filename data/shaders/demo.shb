#pragma shader_version 		1.0
#pragma shader_language 	HLSL
#pragma cull 				BACK
#pragma front 				COUNTER_CLOCKWISE
#pragma topology			TRIANGLE
#pragma polygon 			FILL
#pragma line_width 			1.0
#pragma depth_test 			true
#pragma alpha_mode			OPAQUE

global(gbuffer, g_buffer_resolve)
[
	struct toto
	{
		float2 machin;
	};

	struct VsToFsStruct
	{
		float4 Pos 			: SV_Position;
		float3 Normal 	 	: NORMAL0;
		float2 UV 		 	: TEXCOORD0;
		float3 Color 	 	: COLOR0;
		float3 WorldPos 	: POSITION1;
		float3 Tangent 	 	: TEXCOORD1;
		toto   machin_test;
	};
];



vertex(test)
[

	float4 main(uint InstanceIndex : SV_InstanceID) : SV_Position
	{
		return float4(1,1,1,1);
	}

]
fragment(test)
[
	void main(float4 position)
	{
	}
]


vertex(gbuffer)
[
	struct VSInput
	{
		float4 Pos 		: POSITION0;
		float2 UV 		: TEXCOORD0;
		float3 Color 	: COLOR0;
		float3 Normal 	: NORMAL0;
		float3 Tangent 	: TEXCOORD1;
	};

	#include "ubo_definition.cg"

	VsToFsStruct main(VSInput input, uint InstanceIndex : SV_InstanceID)
	{
		VsToFsStruct output = (VsToFsStruct)0;
		float4 tmpPos = input.Pos + ubo.instancePos[InstanceIndex];

		output.Pos = mul(ubo.projection, mul(ubo.view, mul(ubo.model, tmpPos)));

		output.UV = input.UV;

		// Vertex position in world space
		output.WorldPos = mul(ubo.model, tmpPos).xyz;

		// Normal in world space
		output.Normal = normalize(input.Normal);
		output.Tangent = normalize(input.Tangent);
		
		// Currently just vertex color
		output.Color = input.Color;
		return output;
	}
];

fragment(gbuffer) => "demo_fragment.shb"
