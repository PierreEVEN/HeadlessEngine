
global(gbuffer)
[
int _Subdivision = 4;
int _Width = 1;

struct VsToFsStruct
{
    [[vk::location(0)]] float4 Pos : POSITION0;
};
]

vertex(gbuffer)
[
struct ViewUbo
{
    float4x4 view;
    float4x4 projection;
};

cbuffer view_ubo : register(b0)
{
    ViewUbo view_ubo;
}

struct VsInput
{
    float3 pos : POSITION0;
};

VsToFsStruct main(VsInput input) // SV_InstanceID
{
    VsToFsStruct output = (VsToFsStruct) 0;
		
    output.Pos = mul(mul(view_ubo.projection, view_ubo.view), float4(input.pos, 0));

    return output;
}
];

fragment(gbuffer) 
[
struct FSOutput
{
    float4 Color1 : SV_TARGET0;
    float4 Color2 : SV_TARGET1;
    float4 Color3 : SV_TARGET2;
};
	
FSOutput main(VsToFsStruct input)
{
    FSOutput output = (FSOutput) 0;
    output.Color1 = float4(1, 0, 0, 1);
    output.Color2 = float4(0, 1, 0, 1);
    output.Color3 = float4(0, 0, 1, 1);
    return output;
}
];