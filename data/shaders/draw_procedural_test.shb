
global(gbuffer)
[
	int _Subdivision = 4;
	int _Width = 1;

	struct VsToFsStruct
	{
		[[vk::location(0)]] float4 Pos 			: POSITION0;
	};
]

vertex(gbuffer)
[
	struct ViewData
	{
		float4x4 projection;
		float4x4 model;
		float4x4 view;
	};

	cbuffer view_data : register(b0) { ViewData view_data; }

	struct VsInput 
	{
		float3 pos : POSITION0;
	};

	VsToFsStruct main(VsInput input) // SV_InstanceID
	{
		VsToFsStruct output = (VsToFsStruct)0;
		
		output.Pos = float4(input.pos, 0) * view_data.projection;

		return output;
	}
];

fragment(gbuffer) 
[
	struct FSOutput
	{
		float4 Color1 		: SV_TARGET0;
		float4 Color2 		: SV_TARGET1;
		float4 Color3 		: SV_TARGET2;
	};
	
	FSOutput main(VsToFsStruct input)
	{
		FSOutput output = (FSOutput)0;
		output.Color1 = float4(1, 0, 0, 1);
		output.Color2 = float4(0, 1, 0, 1);
		output.Color3 = float4(0, 0, 1, 1);
		return output;
	}
];