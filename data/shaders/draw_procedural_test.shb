
global(gbuffer, gbuffer_resolve)
[
	int _Subdivision = 4;
	int _Width = 1;

	struct VsToFsStruct
	{
		[[vk::location(0)]] float4 Pos 			: POSITION0;
	};
]

vertex(gbuffer, gbuffer_resolve)
[
	VsToFsStruct main(uint vertex_id : SV_VertexID) // SV_InstanceID
	{
		VsToFsStruct output = (VsToFsStruct)0;
		
		uint quadId = 0;//vertex_id / 6;
		uint vertId = 0;//vertex_id % 6;

		float posX = (quadId % _Subdivision) * _Width + (vertId == 2 || vertId == 4 || vertId == 5 ? _Width : 0);
		float posY = (quadId / _Subdivision) * _Width + (vertId == 1 || vertId == 2 || vertId == 4 ? _Width : 0);

		output.Pos = float4(posX, 0, posY, 1);

		return output;
	}
];

fragment(gbuffer) 
[
	struct FSOutput
	{
		float4 Color1 		: SV_TARGET0;
		float4 Color2 		: SV_TARGET1;
		float4 Color3 		: SV_TARGET2;
	};
	
	FSOutput main(VsToFsStruct input)
	{
		FSOutput output = (FSOutput)0;
		output.Color1 = float4(1, 0, 0, 1);
		output.Color2 = float4(0, 1, 0, 1);
		output.Color3 = float4(0, 0, 1, 1);
		return output;
	}
];

fragment(gbuffer_resolve) 
[
	struct FSOutput
	{
		float4 Color1 		: SV_TARGET0;
	};
	
	FSOutput main(VsToFsStruct input)
	{
		FSOutput output = (FSOutput)0;
		output.Color1 = float4(1, 0, 0, 1);
		return output;
	}
];